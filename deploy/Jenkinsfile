pipeline 
{
   agent any

   environment
   {
      LLAMA_STACK_VERSION = "v0.3.0"
      LLAMA_STACK_DISTRO_NAME = "starter"
   }

   options 
   {
      disableConcurrentBuilds()
      buildDiscarder(logRotator(numToKeepStr: '3'))
   }

   stages
   {
      stage('Prepare') 
      {
         steps 
         {
            sh '''
                    echo "PATH = ${PATH}"
                '''

            git branch: 'main', 
                url: 'https://github.com/glroland/my-llama-stack.git'
         }
      }

      stage('Prepare for LLama Stack Build') 
      {
         steps 
         {
            dir('target')
            {
               // recreate artifact directory
               deleteDir()
               sh 'pwd -P'
            }

            dir('target/llama-stack')
            {
               // checkout the llama stack distro for the configured tag
               checkout scm: [$class: 'GitSCM',
                              userRemoteConfigs: [[url: "https://github.com/llamastack/llama-stack.git"]],
                              branches: [[name: "refs/tags/${env.LLAMA_STACK_VERSION}"]]],
                              poll: false
            }
         }
      }

      stage('Build Base Llama Stack Image') 
      {
         steps 
         {
            dir('target/llama-stack')
            {
               sh """
                  docker build . -f containers/Containerfile --build-arg DISTRO_NAME=${env.LLAMA_STACK_DISTRO_NAME} --tag llama-stack:${env.LLAMA_STACK_DISTRO_NAME} --progress=plain
                  """
            }
         }
      }

      stage('Customize LLama Stack Image')
      {
         steps 
         {
            sh 'docker build -t my-llama-stack:$BUILD_NUMBER -f Containerfile . --build-arg '
            sh 'docker rmi llama-stack:${env.LLAMA_STACK_TAG}'
         }
      }

      stage('Publish Llama Stack Image') 
      {
         steps 
         {
            sh 'docker save my-llama-stack:$BUILD_NUMBER > my-llama-stack-dockerimage.tar'
            step(followSymlinks: false, artifacts: 'my-llama-stack-dockerimage.tar', $class: 'ArtifactArchiver')
            sh 'docker rmi my-llama-stack:$BUILD_NUMBER'
         }
      }

      stage('Reload then push LLama Stack image to quay') 
      {
         steps 
         {
            script 
            {
               docker.withRegistry('https://registry.home.glroland.com/', 'quay') 
               {
                  sh 'docker load -i my-llama-stack-dockerimage.tar'
                  sh 'docker tag my-llama-stack:$BUILD_NUMBER registry.home.glroland.com/ai/my-llama-stack:$BUILD_NUMBER'
                  sh 'docker rmi my-llama-stack:$BUILD_NUMBER'
                  sh 'docker push registry.home.glroland.com/ai/my-llama-stack:$BUILD_NUMBER'
                  sh 'docker rmi registry.home.glroland.com/ai/my-llama-stack:$BUILD_NUMBER'
               }
            }
         }
      }
   }
}
